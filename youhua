优化技术（减少对数据库的访问）

1.页面缓存：
    从缓存中取页面
    手动渲染模板 (存入缓存，有效期60s) 存入的是整个html页面的String
    结果输出
2.URL缓存：
3.对象缓存：
先查找redis缓存中是否有目标对象，若没有，则从数据库中取出目标对象，再存入redis缓存
若要更新目标对象，先更新数据库，再更新redis缓存（删除id键对应的redis缓存对象，再更新token对应的对象）
4.页面静态化，前后端分离（浏览器将html缓存，js、ajax渲染，只需从接口动态下载动态数据,）
    AngularJS
    Vue.js
    服务端返回中包含last-modified，客户端检查页面是否变化，若无变化，则返回304，表示客户端可以使用本地缓存的页面信息
Ajax异步请求格式：
$.ajax({
		url:"/goods/to_detail2/"+goodsId,  //通过接口动态获取数据
		type:"GET",
		data:{

		}, //可指定传入的请求参数
		success:function(data){
			if(data.code == 0){
				render(data.data);
			}else{
				layer.msg(data.msg);
			}
		},
		error:function(){
			layer.msg("客户端请求有误");
		}
	});

5.静态资源优化
    JS/CSS压缩，减少流量(min版jquery)
    多个JS/CSS组合到一个请求（一次下载），减少连接数
6.CDN优化，就近访问（每个节点都有缓存）

接口优化：
1.Redis预减库存，减少数据库访问

2.内存标记减少Redis访问

3.请求先入队缓存，异步下单，增强用户体验

4.RabbitMQ

5.Nginx水平扩展

mycat分库分表

超卖问题：
1.当库存为1时，两个用户同时下单，可能导致库存为负数，超卖
    更新库存时，注意加判断条件 库存>0 才能执行减库操作
2.一个用户同时发出两个请求，导致一个用户重复秒杀
    数据库加唯一索引，防止用户重复购买  u_uid_gid (user_id,goods_id)
    sql加库存数量判断，防止库存变成负数

秒杀接口优化思路：
1.系统初始化时，把商品库存数量加载到redis
2.收到请求，redis预减库存，库存不足，直接返回（不用访问数据库了），否则进入3
3.请求入队，立即返回排队中（不知道成功还是失败）
4.请求出队，生成订单，减少库存
5.客户端轮询，是否秒杀成功
秒杀接口优化详见 RabbitMQ2